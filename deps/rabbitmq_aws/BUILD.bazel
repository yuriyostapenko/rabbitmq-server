load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    rabbitmq_app = "rabbitmq_app2",
)
load("@rules_erlang//:erlang_bytecode2.bzl", "erlang_bytecode")

rabbitmq_app(
    name = "erlang_app",
    app_name = "rabbitmq_aws",
    extra_apps = [
        "crypto",
        "inets",
        "ssl",
        "xmerl",
        "public_key",
    ],
)

xref(
    name = "xref",
    additional_libs = [
        "//deps/rabbit_common:erlang_app",  # keep
    ],
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    plt = "//:base_plt",
    deps = [
        "//deps/rabbit_common:erlang_app",  # keep
    ],
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

erlang_bytecode(
    name = "test_helpers",
    testonly = True,
    srcs = glob(
        ["test/*.erl"],
        exclude = ["test/*_SUITE.erl"],
    ),
    hdrs = glob([
        "include/*.hrl",
        "src/*.hrl",
    ]),
    dest = "test",
    erlc_opts = "//:test_erlc_opts",
    deps = [
        ":test_erlang_app",
    ],
)

eunit(
    name = "eunit",
    compiled_suites = [
        ":test_helpers",
    ],
    data = [
        "test/test_aws_config.ini",
        "test/test_aws_credentials.ini",
    ],
    target = ":test_erlang_app",
    deps = [
        "//deps/rabbit_common",
        "@erlang_packages//meck",
        "@erlang_packages//thoas",
    ],
)

assert_suites()
