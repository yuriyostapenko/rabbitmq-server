load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("//:rabbitmq_home.bzl", "rabbitmq_home")
load("//:rabbitmq_run.bzl", "rabbitmq_run")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    rabbitmq_app = "rabbitmq_app2",
    rabbitmq_integration_suite = "rabbitmq_integration_suite2",
    rabbitmq_suite = "rabbitmq_suite2",
)

rabbitmq_app(
    name = "erlang_app",
    app_name = "amqp_client",
    extra_apps = [
        "xmerl",
        "public_key",
        "ssl",
    ],
    deps = [
        "//deps/rabbit_common:erlang_app",
        "@erlang_packages//credentials_obfuscation",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

rabbitmq_home(
    name = "broker-for-tests-home",
    testonly = True,
    apps = ["rabbit"],
    erl_libs = [
        "@erlang_packages//:deps",
        "@erlang_packages//:test_deps",
        "//:test_early_apps",
        "//:rabbitmq_cli",
        "//:test_apps",
    ],
)

rabbitmq_run(
    name = "rabbitmq-for-tests-run",
    testonly = True,
    home = ":broker-for-tests-home",
)

rabbitmq_integration_suite(
    name = "system_SUITE",
    size = "large",
    deps = [
        "@erlang_packages//meck",
    ],
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "small",
    deps = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbit_common:erlang_app",
    ],
)

assert_suites()

eunit(
    name = "eunit",
    target = ":test_erlang_app",
)
