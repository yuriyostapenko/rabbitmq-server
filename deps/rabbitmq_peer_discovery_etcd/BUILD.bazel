load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "without",
    rabbitmq_app = "rabbitmq_app2",
    rabbitmq_integration_suite = "rabbitmq_integration_suite2",
    rabbitmq_suite = "rabbitmq_suite2",
)

rabbitmq_app(
    name = "erlang_app",
    app_name = "rabbitmq_peer_discovery_etcd",
    deps = [
        "//deps/rabbit",
        "//deps/rabbit_common",
        "//deps/rabbitmq_peer_discovery_common",
        "@erlang_packages//eetcd",
        "@erlang_packages//gun",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    # rather that setting for_target, which will include @gun
    # (via @eetcd) and fail, we produce the equivalent plt
    # without it
    for_target = None,  # keep
    ignore_warnings = True,
    plt = "//:base_plt",
    deps = [
        "//deps/rabbit:erlang_app",  # keep
        "//deps/rabbit_common:erlang_app",  # keep
        "//deps/rabbitmq_peer_discovery_common:erlang_app",  # keep
    ],
)

dialyze(
    name = "dialyze",
    dialyzer_opts = without(
        "-Wunknown",  # also because of `eetcd'
        RABBITMQ_DIALYZER_OPTS,
    ),
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    target = ":test_erlang_app",
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
)

rabbitmq_integration_suite(
    name = "system_SUITE",
    size = "medium",
    runtime_deps = [
        "@erlang_packages//cowlib",
    ],
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "small",
)

assert_suites()
