load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    rabbitmq_app = "rabbitmq_app2",
    rabbitmq_integration_suite = "rabbitmq_integration_suite2",
    rabbitmq_suite = "rabbitmq_suite2",
)
load("@rules_erlang//:erlang_bytecode2.bzl", "erlang_bytecode")

rabbitmq_app(
    name = "erlang_app",
    app_name = "rabbitmq_shovel",
    extra_apps = ["crypto"],
    deps = [
        "//deps/amqp10_client",
        "//deps/amqp_client",
        "//deps/rabbit",
        "//deps/rabbit_common",
    ],
)

xref(
    name = "xref",
    additional_libs = [
        "//deps/rabbitmq_cli:erlang_app",  # keep
    ],
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    libs = ["//deps/rabbitmq_cli:elixir"],  # keep
    plt = "//:base_plt",
    deps = ["//deps/rabbitmq_cli:erlang_app"],  # keep
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    compiled_suites = [":test_shovel_test_utils_beam"],
    target = ":test_erlang_app",
)

broker_for_integration_suites()

# rabbitmq_home(
#     name = "broker-for-tests-home",
#     testonly = True,
#     apps = [
#         "rabbit",
#         "rabbitmq_amqp1_0",
#         "rabbitmq_shovel",
#     ],
#     erl_libs = [
#         "@erlang_packages//:deps",
#         "@erlang_packages//:test_deps",
#         "//:test_early_apps",
#         "//:rabbitmq_cli",
#         "//:test_apps",
#         "//:bazel_native_deps",
#     ],
#     # plugins = [
#     #     "//deps/rabbit:erlang_app",
#     #     "//deps/rabbitmq_amqp1_0:erlang_app",
#     #     ":erlang_app",
#     # ],
# )

# rabbitmq_run(
#     name = "rabbitmq-for-tests-run",
#     testonly = True,
#     home = ":broker-for-tests-home",
# )

erlang_bytecode(
    name = "test_helpers",
    testonly = True,
    srcs = glob(
        ["test/*.erl"],
        exclude = ["test/*_SUITE.erl"],
    ),
    hdrs = glob([
        "include/*.hrl",
        "src/*.hrl",
    ]),
    dest = "test",
    erlc_opts = "//:test_erlc_opts",
    deps = [
        ":test_erlang_app",
        # "//deps/amqp_client",
    ],
)

rabbitmq_integration_suite(
    name = "amqp10_dynamic_SUITE",
    additional_beam = [
        ":test_helpers",
    ],
    flaky = True,
)

rabbitmq_suite(
    name = "amqp10_shovel_SUITE",
    size = "small",
    deps = [
        "//deps/amqp10_common",
        "@erlang_packages//meck",
    ],
)

rabbitmq_integration_suite(
    name = "amqp10_SUITE",
)

rabbitmq_suite(
    name = "config_SUITE",
    size = "small",
)

rabbitmq_integration_suite(
    name = "configuration_SUITE",
)

rabbitmq_integration_suite(
    name = "delete_shovel_command_SUITE",
    additional_beam = [
        "test/shovel_test_utils.beam",
    ],
)

rabbitmq_integration_suite(
    name = "dynamic_SUITE",
    additional_beam = [
        ":test_helpers",
    ],
    flaky = True,
)

rabbitmq_suite(
    name = "parameters_SUITE",
    size = "medium",
    deps = [
        "//deps/rabbit_common",
    ],
)

rabbitmq_integration_suite(
    name = "rolling_upgrade_SUITE",
    additional_beam = [
        "test/shovel_test_utils.beam",
    ],
    # FIXME: As of this writing, there is a bug in Khepri that makes this
    # testsuite unstable.
    flaky = True,
    deps = [
        "@khepri//:erlang_app",
    ],
)

rabbitmq_integration_suite(
    name = "shovel_status_command_SUITE",
    additional_beam = [
        ":test_helpers",
    ],
)

assert_suites()
