load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    rabbitmq_app = "rabbitmq_app2",
    rabbitmq_integration_suite = "rabbitmq_integration_suite2",
)

rabbitmq_app(
    name = "erlang_app",
    testonly = True,
    app_name = "rabbitmq_ct_helpers",
    priv = glob(
        ["tools/**/*"],
        exclude = [".gitignore"],
    ),
    deps = [
        "//deps/rabbit_common",
        "@erlang_packages//inet_tcp_proxy_dist",
        "@erlang_packages//meck",
        "@erlang_packages//proper",
    ],
)

xref(
    name = "xref",
    additional_libs = [
        "//deps/rabbitmq_cli:elixir",
        "//deps/rabbitmq_cli:erlang_app",
        "//deps/rabbit:erlang_app",
        "//deps/rabbitmq_prelaunch:erlang_app",
        "//deps/rabbitmq_management_agent:erlang_app",
        "@erlang_packages//proper",
    ],
    target = ":test_erlang_app",
)

plt(
    name = "deps_plt",
    apps = [
        "common_test",
        "eunit",
        "inets",
    ],
    for_target = ":test_erlang_app",
    ignore_warnings = True,
    libs = [
        "//deps/rabbitmq_cli:elixir",
    ],
    plt = "//:base_plt",
    deps = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbitmq_cli:elixir",
        "//deps/rabbitmq_cli:erlang_app",
        "//deps/rabbitmq_management_agent:erlang_app",
        "//deps/rabbitmq_prelaunch:erlang_app",
        "@erlang_packages//proper",
    ],
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":test_erlang_app",
    warnings_as_errors = False,
)

eunit(
    name = "eunit",
    target = ":test_erlang_app",
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "terraform_SUITE",
    # requires SSH_KEY to create vms, skip running as part of CI
    tags = ["manual"],
)

assert_suites()
