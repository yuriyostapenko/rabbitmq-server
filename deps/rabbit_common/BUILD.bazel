load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    rabbitmq_app = "rabbitmq_app2",
    rabbitmq_suite = "rabbitmq_suite2",
)
load("@rules_erlang//:erlang_bytecode2.bzl", "erlang_bytecode")

py_binary(
    name = "codegen",
    srcs = [
        "codegen.py",
    ],
    imports = ["../../deps/rabbitmq_codegen"],
    deps = [
        "//deps/rabbitmq_codegen:amqp_codegen",
    ],
)

genrule(
    name = "generated_headers",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.9.1.json",
        "//deps/rabbitmq_codegen:credit_extension.json",
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.8.json",
    ],
    outs = ["include/rabbit_framing.hrl"],
    cmd = "$(location :codegen) --ignore-conflicts header $(SRCS) $@",
    tools = [":codegen"],
)

genrule(
    name = "rabbit_framing_amqp_0_9_1.erl",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.9.1.json",
        "//deps/rabbitmq_codegen:credit_extension.json",
    ],
    outs = ["src/rabbit_framing_amqp_0_9_1.erl"],
    cmd = "$(location :codegen) body $(SRCS) $@",
    tools = [":codegen"],
)

genrule(
    name = "rabbit_framing_amqp_0_8.erl",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.8.json",
    ],
    outs = ["src/rabbit_framing_amqp_0_8.erl"],
    cmd = "$(location :codegen) body $(SRCS) $@",
    tools = [":codegen"],
)

rabbitmq_app(
    app_name = "rabbit_common",
    extract_from = "early_apps",
    extra_apps = [
        "compiler",
        "crypto",
        "public_key",
        "sasl",
        "ssl",
        "syntax_tools",
        "tools",
        "xmerl",
        "os_mon",
        "runtime_tools",
    ],
    public_hdrs = glob([
        "include/**/*.hrl",
    ]) + [
        ":generated_headers",
    ],
    srcs = glob([
        "src/**/*.erl",
    ]) + [
        ":rabbit_framing_amqp_0_8.erl",
        ":rabbit_framing_amqp_0_9_1.erl",
    ],
    deps = [
        "@erlang_packages//credentials_obfuscation",
        "@erlang_packages//ranch",
        "@erlang_packages//recon",
        "@erlang_packages//thoas",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    apps = [
        "mnesia",  # keep
    ],
    for_target = ":erlang_app",
    ignore_warnings = True,
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

erlang_bytecode(
    name = "test_helpers",
    hdrs = glob([
        "include/*.hrl",
        "src/*.hrl",
    ]),
    srcs = [
        "test/gen_server2_test_server.erl",
        "test/test_event_handler.erl",
    ],
    deps = [
        ":test_erlang_app",
    ],
    dest = "test",
    erlc_opts = "//:test_erlc_opts",
    testonly = True,
)

eunit(
    name = "eunit",
    compiled_suites = [
        ":test_helpers",
    ],
    target = ":test_erlang_app",
)

rabbitmq_suite(
    name = "rabbit_env_SUITE",
    size = "small",
    deps = [
        "@erlang_packages//proper",
    ],
)

rabbitmq_suite(
    name = "supervisor2_SUITE",
    size = "small",
    additional_beam = [":test_helpers"],
)

rabbitmq_suite(
    name = "unit_priority_queue_SUITE",
    size = "small",
)

rabbitmq_suite(
    name = "unit_password_hashing_SUITE",
    size = "small",
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "medium",
    additional_beam = [":test_helpers"],
    deps = [
        "@erlang_packages//credentials_obfuscation",
        "@erlang_packages//proper",
    ],
)

rabbitmq_suite(
    name = "worker_pool_SUITE",
    size = "small",
)

assert_suites()
