load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    rabbitmq_app = "rabbitmq_app2",
    rabbitmq_integration_suite = "rabbitmq_integration_suite2",
    rabbitmq_suite = "rabbitmq_suite2",
)

rabbitmq_app(
    name = "erlang_app",
    app_name = "rabbitmq_management_agent",
    extra_apps = [
        "crypto",
        "public_key",
        "ssl",
        "xmerl",
    ],
    deps = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbit_common:erlang_app",
        "//deps/rabbitmq_web_dispatch:erlang_app",
        "@erlang_packages//ranch",
    ],
)

xref(
    name = "xref",
    additional_libs = [
        "//deps/rabbitmq_cli:erlang_app",  # keep
    ],
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    libs = ["//deps/rabbitmq_cli:elixir"],  # keep
    plt = "//:base_plt",
    deps = ["//deps/rabbitmq_cli:erlang_app"],  # keep
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    target = ":test_erlang_app",
)

broker_for_integration_suites()

rabbitmq_suite(
    name = "exometer_slide_SUITE",
    size = "medium",
    deps = [
        "@erlang_packages//proper",
    ],
)

rabbitmq_integration_suite(
    name = "metrics_SUITE",
    size = "medium",
)

rabbitmq_integration_suite(
    name = "rabbit_mgmt_gc_SUITE",
    size = "medium",
)

rabbitmq_suite(
    name = "rabbit_mgmt_slide_SUITE",
    size = "small",
    deps = [
        "//deps/rabbitmq_ct_helpers:erlang_app",
        "@erlang_packages//proper",
    ],
)

assert_suites()
