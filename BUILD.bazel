load(
    "@bazel_skylib//rules:common_settings.bzl",
    "bool_flag",
    "string_flag",
)
load("@rules_pkg//pkg:mappings.bzl", "pkg_files")
load("@rules_erlang//:erlang_bytecode2.bzl", "erlc_opts")
load("@rules_erlang//:erlc_opts_file.bzl", "erlc_opts_file")
load("@rules_erlang//:compile_many.bzl", "compile_many")
load("@rules_erlang//:erl_libs.bzl", "erl_libs")
load("@rules_erlang//:dialyze.bzl", "DEFAULT_PLT_APPS", "plt")
load("@rules_erlang//:shell.bzl", "shell")
load("@rules_erlang//:erl_eval.bzl", "erl_eval")
load("//bazel/elixir:iex_eval.bzl", "iex_eval")
load(":rabbitmq_home.bzl", "rabbitmq_home")
load(":rabbitmq_run.bzl", "rabbitmq_run", "rabbitmq_run_command")
load(":rabbitmqctl.bzl", "rabbitmqctl")
load(":dist.bzl", "package_generic_unix", "source_archive")
load(
    ":rabbitmq.bzl",
    "ALL_PLUGIN_NAMES",
    "RABBITMQ_ERLC_OPTS",
    "RABBITMQ_TEST_ERLC_OPTS",
    "all_plugins",
    "without",
)

exports_files([
    "scripts/bazel/rabbitmq-run.sh",
    "scripts/bazel/rabbitmq-run.bat",
    "release-notes",
])

bool_flag(
    name = "enable_test_build",
    build_setting_default = False,
    visibility = ["//visibility:public"],
)

config_setting(
    name = "test_build",
    flag_values = {
        "//:enable_test_build": "true",
    },
)

string_flag(
    name = "elixir_home",
    build_setting_default = "",
    visibility = ["//visibility:public"],
)

plt(
    name = "base_plt",
    apps = DEFAULT_PLT_APPS + [
        "compiler",
        "crypto",
    ],  # keep
    visibility = ["//visibility:public"],
)

PLUGINS = all_plugins(
    rabbitmq_workspace = "",
) + select({
    "@rules_erlang//:debug_build": ["@looking_glass//:erlang_app"],
    "//conditions:default": [],
})

PLUGIN_NAMES = ALL_PLUGIN_NAMES + select({
    "@rules_erlang//:debug_build": ["looking_glass"],
    "//conditions:default": [],
})

rabbitmq_home(
    name = "broker-home",
    apps = PLUGIN_NAMES,
    erl_libs = [
        "@erlang_packages//:deps",
        # "@erlang_packages//:test_deps",
        # "//:test_early_apps",
        "//:early_apps",
        "//:rabbitmq_cli",
        # "//:test_apps",
        "//:apps",
        "//:bazel_native_deps",
    ],
    # plugins = PLUGINS,
)

rabbitmq_run(
    name = "rabbitmq-run",
    home = ":broker-home",
    visibility = ["//visibility:public"],
)

# Allows us to `bazel run broker`
# for the equivalent of `make run-broker`
rabbitmq_run_command(
    name = "broker",
    rabbitmq_run = ":rabbitmq-run",
    subcommand = "run-broker",
)

# Allows us to `bazel run background-broker`
# to start a broker in the background
rabbitmq_run_command(
    name = "background-broker",
    rabbitmq_run = ":rabbitmq-run",
    subcommand = "start-background-broker",
)

# Allows us to `bazel run stop-broker`
# Useful is broker started in the background
rabbitmq_run_command(
    name = "stop-broker",
    rabbitmq_run = ":rabbitmq-run",
    subcommand = "stop-node",
)

# Allows us to `bazel run start-cluster`
# for the equivalent of `make start-cluster`
rabbitmq_run_command(
    name = "start-cluster",
    rabbitmq_run = ":rabbitmq-run",
    subcommand = "start-cluster",
)

# Allows us to `bazel run stop-cluster`
# for the equivalent of `make stop-cluster`
rabbitmq_run_command(
    name = "stop-cluster",
    rabbitmq_run = ":rabbitmq-run",
    subcommand = "stop-cluster",
)

# `bazel run rabbitmqctl`
rabbitmqctl(
    name = "rabbitmqctl",
    home = ":broker-home",
    visibility = ["//visibility:public"],
)

rabbitmqctl(
    name = "rabbitmq-diagnostics",
    home = ":broker-home",
)

rabbitmqctl(
    name = "rabbitmq-plugins",
    home = ":broker-home",
)

rabbitmqctl(
    name = "rabbitmq-streams",
    home = ":broker-home",
)

rabbitmqctl(
    name = "rabbitmq-queues",
    home = ":broker-home",
)

rabbitmqctl(
    name = "rabbitmq-upgrade",
    home = ":broker-home",
)

shell(
    name = "repl",
    deps = PLUGINS,
)

erl_eval(
    name = "otp_version",
    outs = ["otp_version.txt"],
    expression = """{ok, Version} = file:read_file(filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])), file:write_file(os:getenv("OUTS"), Version), halt().""",
)

iex_eval(
    name = "elixir_version",
    outs = ["elixir_version.txt"],
    expression = """File.write!(System.get_env("OUTS"), System.version()); System.halt()""",
)

filegroup(
    name = "root-licenses",
    srcs = glob(["LICENSE*"]),
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "scripts-files",
    srcs = [
        "scripts/bash_autocomplete.sh",
        "scripts/rabbitmq-script-wrapper",
        "scripts/rabbitmqctl-autocomplete.sh",
        "scripts/zsh_autocomplete.sh",
    ],
    prefix = "scripts",
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "release-notes-files",
    srcs = glob([
        "release-notes/*.md",
        "release-notes/*.txt",
    ]),
    prefix = "release-notes",
    visibility = ["//visibility:public"],
)

package_generic_unix(
    name = "package-generic-unix",
    apps = PLUGIN_NAMES,
    erl_libs = [
        "@erlang_packages//:deps",
        # "@erlang_packages//:test_deps",
        # "//:test_early_apps",
        "//:early_apps",
        "//:rabbitmq_cli",
        # "//:test_apps",
        "//:apps",
        "//:bazel_native_deps",
    ],
    plugins = PLUGINS,
)

source_archive(
    name = "source_archive",
    plugins = PLUGINS,
)

alias(
    name = "test-logs",
    actual = "//bazel/util:test-logs",
)

alias(
    name = "remote-test-logs",
    actual = "//bazel/util:remote-test-logs",
)

alias(
    name = "test-node-data",
    actual = "//bazel/util:test-node-data",
)

alias(
    name = "remote-test-node-data",
    actual = "//bazel/util:remote-test-node-data",
)

erlc_opts(
    name = "erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": without("+deterministic", RABBITMQ_ERLC_OPTS),
        "//conditions:default": RABBITMQ_ERLC_OPTS,
    }) + select({
        ":test_build": [
            "-DTEST=1",
            "+nowarn_export_all",
        ],
        "//conditions:default": [],
    }),  # keep
    visibility = [":__subpackages__"],
)

erlc_opts(
    name = "test_erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": without("+deterministic", RABBITMQ_TEST_ERLC_OPTS),
        "//conditions:default": RABBITMQ_TEST_ERLC_OPTS,
    }),  # keep
    visibility = [":__subpackages__"],
)

erlc_opts_file(
    name = "erlc_opts_file",
    out = "erlc_opts_",
    values = select({
        "@rules_erlang//:debug_build": without("+deterministic", RABBITMQ_ERLC_OPTS),
        "//conditions:default": RABBITMQ_ERLC_OPTS,
    }) + select({
        ":test_build": [
            "-DTEST=1",
            "+nowarn_export_all",
        ],
        "//conditions:default": [],
    }),
    visibility = [":__subpackages__"],
)

erlc_opts_file(
    name = "test_erlc_opts_file",
    out = "test_erlc_opts_",
    values = select({
        "@rules_erlang//:debug_build": without("+deterministic", RABBITMQ_TEST_ERLC_OPTS),
        "//conditions:default": RABBITMQ_TEST_ERLC_OPTS,
    }),
    visibility = [":__subpackages__"],
)

compile_many(
    name = "early_apps",
    apps = [
        "//deps/rabbit_common:srcs",
    ],
    visibility = [":__subpackages__"],
    # exec_properties = {
    #     "recycle-runner": "true",
    #     "preserve-workspace": "true",
    #     "persistentWorkerProtocol": "json",
    # },
)

compile_many(
    name = "test_early_apps",
    testonly = True,
    apps = [
        "//deps/rabbit_common:test_srcs",
    ],
    visibility = [":__subpackages__"],
    # exec_properties = {
    #     "recycle-runner": "true",
    #     "preserve-workspace": "true",
    #     "persistentWorkerProtocol": "json",
    # },
)

erl_libs(
    name = "rabbitmq_cli",
    apps = [
        "//deps/rabbitmq_cli:erlang_app",
    ],
    visibility = [":__subpackages__"],
)

compile_many(
    name = "apps",
    apps = [
        "//deps/oauth2_client:srcs",
        "//deps/rabbit:srcs",
        "//deps/rabbitmq_auth_backend_cache:srcs",
        "//deps/rabbitmq_auth_backend_http:srcs",
        "//deps/rabbitmq_auth_backend_ldap:srcs",
        "//deps/rabbitmq_auth_backend_oauth2:srcs",
        "//deps/rabbitmq_auth_mechanism_ssl:srcs",
        "//deps/rabbitmq_aws:srcs",
        "//deps/rabbitmq_amqp1_0:srcs",
        "//deps/rabbitmq_event_exchange:srcs",
        "//deps/rabbitmq_peer_discovery_aws:srcs",
        "//deps/rabbitmq_prelaunch:srcs",
        "//deps/rabbitmq_consistent_hash_exchange:srcs",
        "//deps/rabbitmq_federation:srcs",
        "//deps/rabbitmq_federation_management:srcs",
        "//deps/rabbitmq_jms_topic_exchange:srcs",
        "//deps/rabbitmq_management:srcs",
        "//deps/rabbitmq_management_agent:srcs",
        "//deps/rabbitmq_mqtt:srcs",
        "//deps/rabbitmq_peer_discovery_common:srcs",
        "//deps/rabbitmq_peer_discovery_consul:srcs",
        "//deps/rabbitmq_peer_discovery_etcd:srcs",
        "//deps/rabbitmq_peer_discovery_k8s:srcs",
        "//deps/rabbitmq_prometheus:srcs",
        "//deps/rabbitmq_sharding:srcs",
        "//deps/rabbitmq_random_exchange:srcs",
        "//deps/rabbitmq_web_dispatch:srcs",
        "//deps/rabbitmq_web_mqtt:srcs",
        "//deps/rabbitmq_web_mqtt_examples:srcs",
        "//deps/rabbitmq_web_stomp:srcs",
        "//deps/rabbitmq_web_stomp_examples:srcs",
        "//deps/rabbitmq_recent_history_exchange:srcs",
        "//deps/rabbitmq_shovel:srcs",
        "//deps/rabbitmq_shovel_management:srcs",
        "//deps/rabbitmq_stomp:srcs",
        "//deps/rabbitmq_stream_common:srcs",
        "//deps/rabbitmq_stream_management:srcs",
        "//deps/rabbitmq_stream:srcs",
        "//deps/rabbitmq_top:srcs",
        "//deps/rabbitmq_tracing:srcs",
        "//deps/rabbitmq_trust_store:srcs",
        "//deps/amqp_client:srcs",
        "//deps/amqp10_client:srcs",
        "//deps/amqp10_common:srcs",
        "//deps/trust_store_http:srcs",
    ],
    erl_libs = [
        ":early_apps",
        ":rabbitmq_cli",
        "@erlang_packages//:deps",
    ],
    visibility = [":__subpackages__"],
    # exec_properties = {
    #     "recycle-runner": "true",
    #     "preserve-workspace": "true",
    #     "persistentWorkerProtocol": "json",
    # },
)

compile_many(
    name = "test_apps",
    testonly = True,
    apps = [
        "//deps/oauth2_client:test_srcs",
        "//deps/rabbit:test_srcs",
        "//deps/rabbitmq_auth_backend_cache:test_srcs",
        "//deps/rabbitmq_auth_backend_http:test_srcs",
        "//deps/rabbitmq_auth_backend_ldap:test_srcs",
        "//deps/rabbitmq_auth_backend_oauth2:test_srcs",
        "//deps/rabbitmq_auth_mechanism_ssl:test_srcs",
        "//deps/rabbitmq_aws:test_srcs",
        "//deps/rabbitmq_amqp1_0:test_srcs",
        "//deps/rabbitmq_event_exchange:test_srcs",
        "//deps/rabbitmq_peer_discovery_aws:test_srcs",
        "//deps/rabbitmq_peer_discovery_consul:test_srcs",
        "//deps/rabbitmq_prelaunch:test_srcs",
        "//deps/rabbitmq_consistent_hash_exchange:test_srcs",
        "//deps/rabbitmq_jms_topic_exchange:test_srcs",
        "//deps/rabbitmq_ct_client_helpers:test_srcs",
        "//deps/rabbitmq_ct_helpers:test_srcs",
        "//deps/rabbitmq_federation:test_srcs",
        "//deps/rabbitmq_federation_management:test_srcs",
        "//deps/rabbitmq_management:test_srcs",
        "//deps/rabbitmq_management_agent:test_srcs",
        "//deps/rabbitmq_mqtt:test_srcs",
        "//deps/rabbitmq_peer_discovery_common:test_srcs",
        "//deps/rabbitmq_peer_discovery_etcd:test_srcs",
        "//deps/rabbitmq_peer_discovery_k8s:test_srcs",
        "//deps/rabbitmq_prometheus:test_srcs",
        "//deps/rabbitmq_random_exchange:test_srcs",
        "//deps/rabbitmq_sharding:test_srcs",
        "//deps/rabbitmq_shovel:test_srcs",
        "//deps/rabbitmq_shovel_management:test_srcs",
        "//deps/rabbitmq_stomp:test_srcs",
        "//deps/rabbitmq_stream_common:test_srcs",
        "//deps/rabbitmq_stream_management:test_srcs",
        "//deps/rabbitmq_stream:test_srcs",
        "//deps/rabbitmq_top:test_srcs",
        "//deps/rabbitmq_tracing:test_srcs",
        "//deps/rabbitmq_trust_store:test_srcs",
        "//deps/rabbitmq_web_dispatch:test_srcs",
        "//deps/rabbitmq_web_mqtt:test_srcs",
        "//deps/rabbitmq_web_mqtt_examples:test_srcs",
        "//deps/rabbitmq_web_stomp:test_srcs",
        "//deps/rabbitmq_web_stomp_examples:test_srcs",
        "//deps/rabbitmq_recent_history_exchange:test_srcs",
        "//deps/amqp_client:test_srcs",
        "//deps/amqp10_common:test_srcs",
        "//deps/amqp10_client:test_srcs",
        "//deps/trust_store_http:test_srcs",
    ],
    erl_libs = [
        ":test_early_apps",
        ":rabbitmq_cli",
        "@erlang_packages//:deps",
        "@erlang_packages//:test_deps",
    ],
    visibility = [":__subpackages__"],
    # exec_properties = {
    #     "recycle-runner": "true",
    #     "preserve-workspace": "true",
    #     "persistentWorkerProtocol": "json",
    # },
)

# except for looking glass, we should take these off the registry
erl_libs(
    name = "bazel_native_deps",
    apps = [
        "@erlang_packages//osiris",
    ],
    visibility = [":__subpackages__"],
)
